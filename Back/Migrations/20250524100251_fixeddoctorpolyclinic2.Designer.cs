// <auto-generated />
using System;
using System.Collections.Generic;
using Back.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Back.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250524100251_fixeddoctorpolyclinic2")]
    partial class fixeddoctorpolyclinic2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Back.Models.AppointmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cabinet")
                        .HasColumnType("integer");

                    b.Property<int>("ConclusionId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicalCardId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConclusionId")
                        .IsUnique();

                    b.HasIndex("MedicalCardId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Back.Models.ConclusionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Diagnos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Conclusions");
                });

            modelBuilder.Entity("Back.Models.DistinctEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Distincts");
                });

            modelBuilder.Entity("Back.Models.DoctorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeOfTaking")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Back.Models.DoctorPolyclinicEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("PolyclinicId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<int>>("WorkingDays")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PolyclinicId");

                    b.ToTable("DoctorsPolyclinic");
                });

            modelBuilder.Entity("Back.Models.ExaminationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfAppointment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReceptionId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Back.Models.MedicalCardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfStart")
                        .HasColumnType("date");

                    b.Property<string>("OMSPolicy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PassportSeria")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("PolyclinicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PolyclinicId");

                    b.ToTable("MedicalCards");
                });

            modelBuilder.Entity("Back.Models.MedicineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RulesOfTaking")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Back.Models.PatientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Back.Models.PolyclinicEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DistinctId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegistrationOfficeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DistinctId");

                    b.HasIndex("RegistrationOfficeId")
                        .IsUnique();

                    b.ToTable("Polyclinics");
                });

            modelBuilder.Entity("Back.Models.ReceptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MedicalCardId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("length")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("MedicalCardId");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("Back.Models.ReceptionMedicineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<int>("ReceptionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("ReceptionId");

                    b.ToTable("ReceptionMedicines");
                });

            modelBuilder.Entity("Back.Models.RegistrationOfficeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RegistrationOffices");
                });

            modelBuilder.Entity("Back.Models.ScheduleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("PolyclinicId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("DoctorId");

                    b.HasIndex("PolyclinicId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Back.Models.SickLeaveEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountOfPayments")
                        .HasColumnType("integer");

                    b.Property<string>("Diagnos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("MedicalCardId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalCardId");

                    b.ToTable("SickLeaves");
                });

            modelBuilder.Entity("Back.Models.SpecializationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("Back.Models.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Back.Models.AppointmentEntity", b =>
                {
                    b.HasOne("Back.Models.ConclusionEntity", "conclusionEntity")
                        .WithOne("appointmentEntity")
                        .HasForeignKey("Back.Models.AppointmentEntity", "ConclusionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.MedicalCardEntity", "medicalCardEntity")
                        .WithMany("appointmentEntities")
                        .HasForeignKey("MedicalCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conclusionEntity");

                    b.Navigation("medicalCardEntity");
                });

            modelBuilder.Entity("Back.Models.DoctorEntity", b =>
                {
                    b.HasOne("Back.Models.SpecializationEntity", "specializationEntity")
                        .WithMany("doctorEntities")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.UserEntity", "userEntity")
                        .WithOne("doctorEntity")
                        .HasForeignKey("Back.Models.DoctorEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("specializationEntity");

                    b.Navigation("userEntity");
                });

            modelBuilder.Entity("Back.Models.DoctorPolyclinicEntity", b =>
                {
                    b.HasOne("Back.Models.DoctorEntity", "doctorEntity")
                        .WithMany("doctorPolyclinics")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.PolyclinicEntity", "polyclinicEntity")
                        .WithMany("doctorPolyclinicEntities")
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctorEntity");

                    b.Navigation("polyclinicEntity");
                });

            modelBuilder.Entity("Back.Models.ExaminationEntity", b =>
                {
                    b.HasOne("Back.Models.ReceptionEntity", "receptionEntity")
                        .WithMany("examinationEntities")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.SpecializationEntity", "specializationEntity")
                        .WithMany("examinationEntities")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("receptionEntity");

                    b.Navigation("specializationEntity");
                });

            modelBuilder.Entity("Back.Models.MedicalCardEntity", b =>
                {
                    b.HasOne("Back.Models.PatientEntity", "patientEntity")
                        .WithMany("medicalCardEntities")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.PolyclinicEntity", "polyclinicEntity")
                        .WithMany("medicalCardEntities")
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patientEntity");

                    b.Navigation("polyclinicEntity");
                });

            modelBuilder.Entity("Back.Models.PatientEntity", b =>
                {
                    b.HasOne("Back.Models.UserEntity", "userEntity")
                        .WithOne("patientEntity")
                        .HasForeignKey("Back.Models.PatientEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userEntity");
                });

            modelBuilder.Entity("Back.Models.PolyclinicEntity", b =>
                {
                    b.HasOne("Back.Models.DistinctEntity", "distinctEntity")
                        .WithMany("polyclinicEntities")
                        .HasForeignKey("DistinctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.RegistrationOfficeEntity", "registrationOffice")
                        .WithOne("polyclinicEntity")
                        .HasForeignKey("Back.Models.PolyclinicEntity", "RegistrationOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("distinctEntity");

                    b.Navigation("registrationOffice");
                });

            modelBuilder.Entity("Back.Models.ReceptionEntity", b =>
                {
                    b.HasOne("Back.Models.MedicalCardEntity", "medicalCardEntity")
                        .WithMany("receptionEntities")
                        .HasForeignKey("MedicalCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medicalCardEntity");
                });

            modelBuilder.Entity("Back.Models.ReceptionMedicineEntity", b =>
                {
                    b.HasOne("Back.Models.MedicineEntity", "medicineEntity")
                        .WithMany("receptionMedicineEntities")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.ReceptionEntity", "receptionEntity")
                        .WithMany("receptionMedicineEntities")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medicineEntity");

                    b.Navigation("receptionEntity");
                });

            modelBuilder.Entity("Back.Models.RegistrationOfficeEntity", b =>
                {
                    b.HasOne("Back.Models.UserEntity", "userEntity")
                        .WithOne("registrationOfficeEntity")
                        .HasForeignKey("Back.Models.RegistrationOfficeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userEntity");
                });

            modelBuilder.Entity("Back.Models.ScheduleEntity", b =>
                {
                    b.HasOne("Back.Models.AppointmentEntity", "appointmentEntity")
                        .WithOne("scheduleEntity")
                        .HasForeignKey("Back.Models.ScheduleEntity", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.DoctorEntity", "doctorEntity")
                        .WithMany("scheduleEntities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.PolyclinicEntity", "polyclinicEntity")
                        .WithMany("scheduleEntities")
                        .HasForeignKey("PolyclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointmentEntity");

                    b.Navigation("doctorEntity");

                    b.Navigation("polyclinicEntity");
                });

            modelBuilder.Entity("Back.Models.SickLeaveEntity", b =>
                {
                    b.HasOne("Back.Models.DoctorEntity", "doctorEntity")
                        .WithMany("sickLeaveEntities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Models.MedicalCardEntity", "medicalCardEntity")
                        .WithMany("sickLeaveEntities")
                        .HasForeignKey("MedicalCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctorEntity");

                    b.Navigation("medicalCardEntity");
                });

            modelBuilder.Entity("Back.Models.AppointmentEntity", b =>
                {
                    b.Navigation("scheduleEntity");
                });

            modelBuilder.Entity("Back.Models.ConclusionEntity", b =>
                {
                    b.Navigation("appointmentEntity");
                });

            modelBuilder.Entity("Back.Models.DistinctEntity", b =>
                {
                    b.Navigation("polyclinicEntities");
                });

            modelBuilder.Entity("Back.Models.DoctorEntity", b =>
                {
                    b.Navigation("doctorPolyclinics");

                    b.Navigation("scheduleEntities");

                    b.Navigation("sickLeaveEntities");
                });

            modelBuilder.Entity("Back.Models.MedicalCardEntity", b =>
                {
                    b.Navigation("appointmentEntities");

                    b.Navigation("receptionEntities");

                    b.Navigation("sickLeaveEntities");
                });

            modelBuilder.Entity("Back.Models.MedicineEntity", b =>
                {
                    b.Navigation("receptionMedicineEntities");
                });

            modelBuilder.Entity("Back.Models.PatientEntity", b =>
                {
                    b.Navigation("medicalCardEntities");
                });

            modelBuilder.Entity("Back.Models.PolyclinicEntity", b =>
                {
                    b.Navigation("doctorPolyclinicEntities");

                    b.Navigation("medicalCardEntities");

                    b.Navigation("scheduleEntities");
                });

            modelBuilder.Entity("Back.Models.ReceptionEntity", b =>
                {
                    b.Navigation("examinationEntities");

                    b.Navigation("receptionMedicineEntities");
                });

            modelBuilder.Entity("Back.Models.RegistrationOfficeEntity", b =>
                {
                    b.Navigation("polyclinicEntity");
                });

            modelBuilder.Entity("Back.Models.SpecializationEntity", b =>
                {
                    b.Navigation("doctorEntities");

                    b.Navigation("examinationEntities");
                });

            modelBuilder.Entity("Back.Models.UserEntity", b =>
                {
                    b.Navigation("doctorEntity");

                    b.Navigation("patientEntity");

                    b.Navigation("registrationOfficeEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
